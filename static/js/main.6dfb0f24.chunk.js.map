{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PATH_BASE","SORTS","NONE","list","TITLE","sortBy","AUTHOR","COMMENTS","reverse","POINTS","App","props","state","results","searchKey","searchTerm","error","isLoading","needsToSearchTopStories","bind","setSearchTopStories","fetchSearchTopStories","onSearchChange","onSearchSubmit","onDismiss","this","result","hits","page","setState","prevState","oldHits","updatedHits","updateSearchTopStoriesState","url","fetch","then","response","json","catch","e","id","filter","item","objectID","updateResultsOnDismiss","event","target","value","preventDefault","className","onChange","onSubmit","ButtonWithConditionalRendering","onClick","Component","Search","children","type","ref","node","largeColumn","width","midColumn","smallColumn","Table","sortKey","isSortReverse","onSort","sortedList","reverseSortedList","style","activeSortKey","map","key","href","title","author","num_comments","points","protoTypes","PropTypes","arrayOf","shape","string","isRequired","number","func","Button","defaultProps","conditionalRenderingFn","EitherComponent","Sort","sortClass","classNames","compose","withConditionalRenderings","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"uXAYMA,EAAY,gCAMZC,EAAQ,CACZC,KAAM,SAAAC,GAAI,OAAIA,GACdC,MAAO,SAAAD,GAAI,OAAIE,iBAAOF,EAAM,UAC5BG,OAAQ,SAAAH,GAAI,OAAIE,iBAAOF,EAAM,WAC7BI,SAAU,SAAAJ,GAAI,OAAIE,iBAAOF,EAAM,gBAAgBK,WAC/CC,OAAQ,SAAAN,GAAI,OAAIE,iBAAOF,EAAM,UAAUK,YAsCnCE,E,kDAEJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,KACTC,UAAW,GACXC,WA3DgB,QA4DhBC,MAAO,KACPC,WAAW,GAGb,EAAKC,wBAA0B,EAAKA,wBAAwBC,KAA7B,gBAC/B,EAAKC,oBAAsB,EAAKA,oBAAoBD,KAAzB,gBAC3B,EAAKE,sBAAwB,EAAKA,sBAAsBF,KAA3B,gBAE7B,EAAKG,eAAiB,EAAKA,eAAeH,KAApB,gBACtB,EAAKI,eAAiB,EAAKA,eAAeJ,KAApB,gBACtB,EAAKK,UAAY,EAAKA,UAAUL,KAAf,gBAhBA,E,oEAmBKJ,GACtB,OAAQU,KAAKb,MAAMC,QAAQE,K,0CAGTW,GAAS,IACnBC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KACdH,KAAKI,SA9D2B,SAACF,EAAMC,GAAP,OAClC,SAACE,GAAe,IACNhB,EAAsBgB,EAAtBhB,UAAWD,EAAWiB,EAAXjB,QAEbkB,EAAUlB,GAAWA,EAAQC,GAC/BD,EAAQC,GAAWa,KACnB,GACIK,EAAW,sBACZD,GADY,YAEZJ,IAEL,MAAO,CACLd,QAAQ,2BACHA,GADE,kBAEJC,EAAY,CAAEa,KAAMK,EAAaJ,UAEpCX,WAAW,IA8CDgB,CAA4BN,EAAMC,M,4CAG5Bb,GAAuB,IAAD,OAAVa,EAAU,uDAAH,EACvCH,KAAKI,SAAS,CAAEZ,WAAW,IAC3B,IAAMiB,EAAG,UAAMlC,GAAN,OAhFO,UAgFP,YA/EQ,UA+ER,OAAgDe,EAAhD,YA9EM,SA8EN,OACPa,EADO,YA7EK,gBA6EL,OAnFO,OAqFhBO,IAAMD,GAAKE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAClCF,MAAK,SAAAV,GAAM,OAAI,EAAKN,oBAAoBM,MACxCa,OAAM,SAAAC,GACL,EAAKX,SAAS,CAAEb,MAAOwB,S,0CAIT,IAQVzB,EAAeU,KAAKb,MAApBG,WACRU,KAAKI,SAAS,CACZf,UAAWC,IAEbU,KAAKJ,sBAAsBN,K,gCAGnB0B,GACRhB,KAAKI,SAxEsB,SAACY,GAAD,OAC7B,SAACX,GAAe,IACNhB,EAAuBgB,EAAvBhB,UAAWD,EAAYiB,EAAZjB,QADN,EAEUA,EAAQC,GAAvBa,EAFK,EAELA,KAAMC,EAFD,EAECA,KAERI,EAAcL,EAAKe,QADT,SAAAC,GAAI,OAAIA,EAAKC,WAAaH,KAE1C,MAAO,CACL5B,QAAQ,2BACHA,GADE,kBAEJC,EAAY,CAAEa,KAAMK,EAAaJ,YA+DxBiB,CAAuBJ,M,qCAGxBK,GACbrB,KAAKI,SAAS,CAAEd,WAAY+B,EAAMC,OAAOC,U,qCAG5BF,GAAQ,IACb/B,EAAeU,KAAKb,MAApBG,WACRU,KAAKI,SAAS,CAAEf,UAAWC,IACvBU,KAAKP,wBAAwBH,IAC/BU,KAAKJ,sBAAsBN,GAE7B+B,EAAMG,mB,+BAGE,IAAD,SAQHxB,KAAKb,MALPG,EAHK,EAGLA,WACAF,EAJK,EAILA,QACAC,EALK,EAKLA,UACAE,EANK,EAMLA,MACAC,EAPK,EAOLA,UAEIW,EAAQf,GAAWA,EAAQC,IAAcD,EAAQC,GAAWc,MAAS,EACrEzB,EAAQU,GAAWA,EAAQC,IAAcD,EAAQC,GAAWa,MAAS,GAM3E,OACE,yBAAKuB,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEF,MAAOjC,EACPoC,SAAU1B,KAAKH,eACf8B,SAAU3B,KAAKF,gBAHjB,WAQAP,EACA,yBAAKkC,UAAU,gBACb,0DAEF,kBAAC,EAAD,CACE/C,KAAMA,EACNqB,UAAWC,KAAKD,YAEpB,yBAAK0B,UAAU,gBACb,kBAACG,EAAD,CACEpC,UAAWA,EACXqC,QAAS,kBACX,EAAKjC,sBAAsBP,EAAYc,EAAO,KAH9C,c,GA7GQ2B,aAuJZC,EAAS,SAAC,GAA6C,IAA3CR,EAA0C,EAA1CA,MAAOG,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,SAAUK,EAAe,EAAfA,SAE3C,OACE,0BAAML,SAAUA,GACbK,EACD,2BACEC,KAAK,OACLV,MAAOA,EACPG,SAAUA,EACVQ,IAAK,SAACC,GAAD,OAAkBA,KAEvB,4BAAQF,KAAK,UAAUD,KAWzBI,EAAc,CAClBC,MAAO,OAGHC,EAAY,CAChBD,MAAO,OAGHE,EAAc,CAClBF,MAAO,OAGHG,E,kDACJ,WAAYtD,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXsD,QAAS,OACTC,eAAe,GAGjB,EAAKC,OAAS,EAAKA,OAAOjD,KAAZ,gBARG,E,mDAYZ+C,GACL,IAAMC,EAAgB1C,KAAKb,MAAMsD,UAAYA,IAAYzC,KAAKb,MAAMuD,cACpE1C,KAAKI,SAAS,CAAEqC,UAASC,oB,+BAGjB,IAAD,EAIH1C,KAAKd,MAFPR,EAFK,EAELA,KACAqB,EAHK,EAGLA,UAHK,EASHC,KAAKb,MAFPsD,EAPK,EAOLA,QACAC,EARK,EAQLA,cAIIE,EAAapE,EAAMiE,GAAS/D,GAC5BmE,EAAoBH,EACtBE,EAAW7D,UACX6D,EACJ,OACA,yBAAKnB,UAAU,SACX,yBAAKA,UAAU,gBACb,0BAAMqB,MAAO,CAAET,MAAO,QACpB,kBAAC,EAAD,CACEI,QAAS,QACTE,OAAQ3C,KAAK2C,OACbD,cAAeA,EACfK,cAAeN,GAJjB,UASF,0BAAMK,MAAO,CAAET,MAAO,QACpB,kBAAC,EAAD,CACEI,QAAS,SACTE,OAAQ3C,KAAK2C,OACbD,cAAeA,EACfK,cAAeN,GAJjB,WASF,0BAAMK,MAAO,CAAET,MAAO,QACpB,kBAAC,EAAD,CACEI,QAAS,WACTE,OAAQ3C,KAAK2C,OACbI,cAAeN,EACfC,cAAeA,GAJjB,aASF,0BAAMI,MAAO,CAAET,MAAO,QACpB,kBAAC,EAAD,CACEI,QAAS,SACTE,OAAQ3C,KAAK2C,OACbD,cAAeA,EACfK,cAAeN,GAJjB,WASF,0BAAMK,MAAO,CAAET,MAAO,QAAtB,YAIDQ,EAAkBG,KAAI,SAAA9B,GAAI,OACzB,yBAAK+B,IAAK/B,EAAKC,SAAUM,UAAU,aACjC,0BAAMqB,MAAOV,GACX,uBAAGc,KAAMhC,EAAKT,KAAMS,EAAKiC,OAAW,KAEtC,0BAAML,MAAOR,GAAYpB,EAAKkC,OAA9B,KACA,0BAAMN,MAAOP,GAAcrB,EAAKmC,aAAhC,KACA,0BAAMP,MAAOP,GAAcrB,EAAKoC,QAChC,0BAAMR,MAAOP,GACX,kBAAC,EAAD,CACEd,UAAU,gBACVI,QAAS,kBAAI9B,EAAUmB,EAAKC,YAF9B,qB,GA1FMW,aAuLpBU,EAAMe,WAAa,CAEjB7E,KAAM8E,IAAUC,QACdD,IAAUE,MAAM,CACdvC,SAAUqC,IAAUG,OAAOC,WAC3BR,OAAQI,IAAUG,OAClBlD,IAAK+C,IAAUG,OACfN,aAAcG,IAAUK,OACxBP,OAAQE,IAAUK,UAEpBD,WACF7D,UAAWyD,IAAUM,KAAKF,YAI5B,IAAMG,EAAS,SAAC,GAAD,IAAGlC,EAAH,EAAGA,QAASJ,EAAZ,EAAYA,UAAWO,EAAvB,EAAuBA,SAAvB,OACb,4BACEH,QAASA,EACTJ,UAAWA,EACXQ,KAAK,UACJD,IAGL+B,EAAOC,aAAe,CACpBvC,UAAW,IASb,IA2CoBwC,EAAwBC,EA3CtCC,EAAO,SAAC,GAKI,IAJhB1B,EAIe,EAJfA,QACAC,EAGe,EAHfA,cACAK,EAEe,EAFfA,cACAJ,EACe,EADfA,OACAX,EAAe,EAAfA,SACQoC,EAAYC,IAChB,gBACA,CAAE,mBAAoB5B,IAAYM,GAAeL,GACjD,CAAE,qBAAsBD,IAAYM,IAAgBL,IAEtD,OACE,kBAAC,EAAD,CACEb,QAAS,kBAAMc,EAAOF,IACtBhB,UAAW2C,GAEVpC,IA2CHJ,EAJ4B0C,aAZdL,EAUS,SAAC/E,GAAD,OAAWA,EAAMM,WAVF0E,EAKnB,kBACvB,6BACE,uBAAGzC,UAAU,iBAAb,aAP4D,SAACK,GAAD,OAAe,SAAC5C,GAAD,OAC7E+E,EAAuB/E,GACnB,kBAACgF,EAAD,MACA,kBAACpC,EAAc5C,MAakBqF,CAA0BR,GAElD9E,IC/fKuF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzE,MAAK,SAAA0E,GACJA,EAAaC,gBAEdxE,OAAM,SAAAvB,GACLgG,QAAQhG,MAAMA,EAAMiG,c","file":"static/js/main.6dfb0f24.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport fetch from 'isomorphic-fetch';\nimport { sortBy } from 'lodash';\nimport classNames from 'classnames';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport 'font-awesome/css/font-awesome.min.css';\nimport { compose } from 'recompose';\n\nconst DEFAULT_QUERY = 'redux';\nconst DEFAULT_HPP = '100';\n\nconst PATH_BASE = 'https://hn.algolia.com/api/v1';\nconst PATH_SEARCH = '/search';\nconst PARAM_SEARCH = 'query=';\nconst PARAM_PAGE = 'page=';\nconst PARAM_HPP = 'hitsPerPage=';\n\nconst SORTS = {\n  NONE: list => list,\n  TITLE: list => sortBy(list, 'title'),\n  AUTHOR: list => sortBy(list, 'author'),\n  COMMENTS: list => sortBy(list, 'num_comments').reverse(),\n  POINTS: list => sortBy(list, 'points').reverse(),\n};\n\nconst updateSearchTopStoriesState = (hits, page) =>\n  (prevState) => {\n    const { searchKey, results} = prevState;\n\n    const oldHits = results && results[searchKey]\n      ? results[searchKey].hits\n      : [];\n      const updatedHits = [\n        ...oldHits,\n        ...hits\n      ];\n      return {\n        results: {\n          ...results,\n          [searchKey]: { hits: updatedHits, page }\n        },\n        isLoading: false\n      };\n  }\n\nconst updateResultsOnDismiss = (id) =>\n  (prevState) => {\n    const { searchKey, results } = prevState;\n    const { hits, page } = results[searchKey];\n    const isNotId = item => item.objectID !== id;\n    const updatedHits = hits.filter(isNotId);\n    return {\n      results:  { \n        ...results, \n        [searchKey]: { hits: updatedHits, page } \n      }\n    }\n  }\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      results: null,\n      searchKey: '',\n      searchTerm: DEFAULT_QUERY,\n      error: null,\n      isLoading: false,\n    };\n\n    this.needsToSearchTopStories = this.needsToSearchTopStories.bind(this);\n    this.setSearchTopStories = this.setSearchTopStories.bind(this);\n    this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this);\n\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n  }\n\n  needsToSearchTopStories(searchTerm) {\n    return !this.state.results[searchTerm];\n  }\n\n  setSearchTopStories(result) {\n    const { hits, page } = result;\n    this.setState(updateSearchTopStoriesState(hits, page));\n  }\n\n  fetchSearchTopStories(searchTerm, page = 0) {\n    this.setState({ isLoading: true });\n    const url = `${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${\n      page}&${PARAM_HPP}${DEFAULT_HPP}`;\n    fetch(url).then(response => response.json())\n      .then(result => this.setSearchTopStories(result))\n      .catch(e => {\n        this.setState({ error: e });\n      });\n  }\n\n  componentDidMount() {\n    /* this.setState((prevState) =>{ \n      const { searchTerm } = prevState;\n      this.fetchSearchTopStories(searchTerm);\n      return {\n        searchKey: searchTerm\n      }\n    }); */\n    const { searchTerm } = this.state;\n    this.setState({ \n      searchKey: searchTerm\n    });\n    this.fetchSearchTopStories(searchTerm);\n  }\n\n  onDismiss(id) {\n    this.setState(updateResultsOnDismiss(id));\n  }\n\n  onSearchChange(event) {\n    this.setState({ searchTerm: event.target.value });\n  }\n\n  onSearchSubmit(event) {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    if (this.needsToSearchTopStories(searchTerm)) {\n      this.fetchSearchTopStories(searchTerm);\n    }\n    event.preventDefault();\n  }\n\n  render() {\n\n    const { \n      searchTerm, \n      results, \n      searchKey, \n      error,\n      isLoading,\n    } = this.state;\n    const page = (results && results[searchKey] && results[searchKey].page) || 0;\n    const list = (results && results[searchKey] && results[searchKey].hits) || [];\n    \n    // if (!results) {\n    //   return null;\n    // }\n\n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <Search \n            value={searchTerm} \n            onChange={this.onSearchChange}\n            onSubmit={this.onSearchSubmit}\n          >\n              Search\n          </Search>\n        </div>\n        { error?\n          <div className=\"interactions\">\n            <p> Something went wrong. XD </p>\n          </div> :\n          <Table \n            list={list}\n            onDismiss={this.onDismiss}/>\n        }\n        <div className=\"interactions\">\n          <ButtonWithConditionalRendering \n            isLoading={isLoading} \n            onClick={() => \n          this.fetchSearchTopStories(searchKey,  page + 1)}>\n              More\n          </ButtonWithConditionalRendering>\n        </div>\n      </div>\n    );\n  }\n}\n\n// class Search extends Component {\n//   componentDidMount() {\n//     if (this.input) {\n//       this.input.focus();\n//     }\n//   }\n\n//   render() {\n//     const {\n//       value,\n//       onChange,\n//       onSubmit,\n//       children\n//     } = this.props;\n//     return (\n//       <form onSubmit={onSubmit}>\n//         {children}\n//         <input\n//           type=\"text\"\n//           value={value}\n//           onChange={onChange}\n//           ref = {(node)=>{this.input = node;}}\n//           />\n//         <button type=\"submit\">{children}</button>\n//       </form>\n//     );\n//   }\n// }\n\n\nconst Search = ({ value, onChange, onSubmit, children }) => {\n  let input;\n  return (\n    <form onSubmit={onSubmit}>\n      {children}\n      <input\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n        ref={(node) => input = node}\n      />\n        <button type=\"submit\">{children}</button>\n    </form>\n  );\n}\nSearch.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  onSubmit: PropTypes.func,\n  children: PropTypes.node.isRequired\n};\n\nconst largeColumn = {\n  width: '40%',\n};\n\nconst midColumn = {\n  width: '30%',\n};\n\nconst smallColumn = {\n  width: '10%',\n};\n\nclass Table extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sortKey: 'NONE',\n      isSortReverse: false,\n    };\n\n    this.onSort = this.onSort.bind(this);\n\n  }\n\n  onSort(sortKey) {\n    const isSortReverse = this.state.sortKey === sortKey && !this.state.isSortReverse;\n    this.setState({ sortKey, isSortReverse });\n  }\n\n  render() {\n    const {\n      list,\n      onDismiss,\n    } = this.props;\n\n    const {\n      sortKey,\n      isSortReverse\n    } = this.state;\n\n    // const sortedList = SORTS[sortKey](list);\n    const sortedList = SORTS[sortKey](list);\n    const reverseSortedList = isSortReverse \n      ? sortedList.reverse()\n      : sortedList;\n    return(\n    <div className=\"table\">\n        <div className=\"table-header\">\n          <span style={{ width: '40%' }}>\n            <Sort\n              sortKey={'TITLE'}\n              onSort={this.onSort}\n              isSortReverse={isSortReverse}\n              activeSortKey={sortKey}\n            >\n              Title\n            </Sort>\n          </span>\n          <span style={{ width: '30%' }}>\n            <Sort\n              sortKey={'AUTHOR'}\n              onSort={this.onSort}\n              isSortReverse={isSortReverse}\n              activeSortKey={sortKey}\n            >\n              Author\n            </Sort>\n          </span>\n          <span style={{ width: '10%' }}>\n            <Sort\n              sortKey={'COMMENTS'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n              isSortReverse={isSortReverse}\n            >\n              Comments\n            </Sort>\n          </span>\n          <span style={{ width: '10%' }}>\n            <Sort\n              sortKey={'POINTS'}\n              onSort={this.onSort}\n              isSortReverse={isSortReverse}\n              activeSortKey={sortKey}\n            >\n              Points\n            </Sort>\n          </span>\n          <span style={{ width: '10%' }}>\n            Archive\n          </span>\n        </div>\n        {reverseSortedList.map(item =>\n          <div key={item.objectID} className=\"table-row\">\n            <span style={largeColumn}>\n              <a href={item.url}>{item.title}</a>{\" \"} \n            </span>\n            <span style={midColumn}>{item.author} </span>\n            <span style={smallColumn}>{item.num_comments} </span>\n            <span style={smallColumn}>{item.points}</span>\n            <span style={smallColumn}>\n              <Button \n                className=\"button-inline\" \n                onClick={()=>onDismiss(item.objectID)}>\n                  dismiss\n              </Button>\n            </span>\n          </div>  \n        )}\n      </div>\n    )\n  }\n}\n\n/* const Table = ({\n  list,\n  sortKey,\n  isSortReverse,\n  onSort, \n  onDismiss\n}) => {\n  const sortedList = SORTS[sortKey](list);\n  const reverseSortedList = isSortReverse \n    ? sortedList.reverse()\n    : sortedList;\n  return(\n\n  <div className=\"table\">\n      <div className=\"table-header\">\n        <span style={{ width: '40%' }}>\n          <Sort\n            sortKey={'TITLE'}\n            onSort={onSort}\n            isSortReverse={isSortReverse}\n            activeSortKey={sortKey}\n          >\n            Title\n          </Sort>\n        </span>\n        <span style={{ width: '30%' }}>\n          <Sort\n            sortKey={'AUTHOR'}\n            onSort={onSort}\n            isSortReverse={isSortReverse}\n            activeSortKey={sortKey}\n          >\n            Author\n          </Sort>\n        </span>\n        <span style={{ width: '10%' }}>\n          <Sort\n            sortKey={'COMMENTS'}\n            onSort={onSort}\n            activeSortKey={sortKey}\n            isSortReverse={isSortReverse}\n          >\n            Comments\n          </Sort>\n        </span>\n        <span style={{ width: '10%' }}>\n          <Sort\n            sortKey={'POINTS'}\n            onSort={onSort}\n            isSortReverse={isSortReverse}\n            activeSortKey={sortKey}\n          >\n            Points\n          </Sort>\n        </span>\n        <span style={{ width: '10%' }}>\n          Archive\n        </span>\n      </div>\n      {reverseSortedList.map(item =>\n        <div key={item.objectID} className=\"table-row\">\n          <span style={largeColumn}>\n            <a href={item.url}>{item.title}</a>{\" \"} \n          </span>\n          <span style={midColumn}>{item.author} </span>\n          <span style={smallColumn}>{item.num_comments} </span>\n          <span style={smallColumn}>{item.points}</span>\n          <span style={smallColumn}>\n            <Button \n              className=\"button-inline\" \n              onClick={()=>onDismiss(item.objectID)}>\n                dismiss\n            </Button>\n          </span>\n        </div>  \n      )}\n    </div>\n  )\n} */\n\nTable.protoTypes = {\n  // list: PropTypes.array.isRequired,\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      objectID: PropTypes.string.isRequired,\n      author: PropTypes.string,\n      url: PropTypes.string,\n      num_comments: PropTypes.number,\n      points: PropTypes.number,\n    })\n  ).isRequired,\n  onDismiss: PropTypes.func.isRequired,\n};\n\n\nconst Button = ({ onClick, className, children }) =>\n  <button \n    onClick={onClick} \n    className={className}\n    type=\"button\">\n    {children}\n  </button>\n\nButton.defaultProps = {\n  className: '',\n};\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n  className: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nconst Sort = ({ \n  sortKey, \n  isSortReverse,\n  activeSortKey,\n  onSort, \n  children }) => {\n    const sortClass = classNames(\n      'button-inline',\n      { 'button-active-up': sortKey === activeSortKey&&isSortReverse },\n      { 'button-active-down': sortKey === activeSortKey&&!isSortReverse }\n    );\n    return (\n      <Button \n        onClick={() => onSort(sortKey)}\n        className={sortClass}\n      >\n        {children}\n      </Button>\n    )\n\n  }\n\n/* Replaced by HOC Button\n// const withLoading = (Component) => (props) => \n//   props.isLoading? <Loading/> : <Component {...props} />\n\nconst Loading = () =>\n  (<div>\n    <i className=\"fa fa-spinner\">loading</i>\n  </div>)\n\nconst withLoading = (Component) => ({ isLoading, ...rest }) => \n  isLoading? <Loading/> : <Component {...rest} />\n\nconst ButtonWithLoading = withLoading(Button); */\n\n// Reusable HOC Button\n//\nconst withMaybe = (conditionalRenderingFn) => (Component) => (props) =>\n  conditionalRenderingFn(props)\n    ? null\n    : <Component { ...props } />\n\nconst withEither = (conditionalRenderingFn, EitherComponent) => (Component) => (props) =>\n  conditionalRenderingFn(props)\n    ? <EitherComponent />\n    : <Component {...props} />\n\nconst LoadingIndicator = () =>\n  <div>\n    <i className=\"fa fa-spinner\">loading</i>\n  </div>\n\nconst isLoadingConditionFn = (props) => props.isLoading;\n\nconst withConditionalRenderings = compose(\n  withEither(isLoadingConditionFn, LoadingIndicator)\n);\n\nconst ButtonWithConditionalRendering = withConditionalRenderings(Button)\n\nexport default App;\n\nexport { Button, Table, Search };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nif (module.hot) {\n  module.hot.accept();\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}